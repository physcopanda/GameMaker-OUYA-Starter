<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
// player id this controller is registered to
// get player id from n'th controller instance
for(var i = 0; i &lt; instance_number(object_index); i++){
    if(id == instance_find(object_index, i)){
        player = i;
        break;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw base image
if(player == noone || (global.p[player] == GAMEPAD_NONE &amp;&amp; player != 0)){
    image_blend = c_dkgray;
    draw_self();
} else {
    image_blend = c_white;
    draw_self();
    // show the overlay indicators
    // base
    if(global.p[player] != GAMEPAD_NONE){
        draw_sprite_ext(sprite_index, player, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    
    // analogue sticks (only if not a keyboard pad)
    if(global.p_type[player] != GAMEPAD_KEYS){
        var xo = 0;
        var yo = 0;
        var c = c_dkgray;
        if(abs(global.p_axislh[player])&gt;ANALOGUE_DEADZONE || abs(global.p_axislv[player])&gt;ANALOGUE_DEADZONE){
            xo = global.p_axislh[player] * 3;
            yo = global.p_axislv[player] * 3;
            c = c_white;
        }
        draw_sprite_ext(sprite_index, 9, x+xo, y+yo, image_xscale, image_yscale, 0, c, 1.0); 
        var xo = 0;
        var yo = 0;
        c = c_dkgray;
        if(abs(global.p_axisrh[player])&gt;ANALOGUE_DEADZONE || abs(global.p_axisrv[player])&gt;ANALOGUE_DEADZONE){
            xo = global.p_axisrh[player] * 3;
            yo = global.p_axisrv[player] * 3;
            c = c_white;
        }
        draw_sprite_ext(sprite_index, 10, x+xo, y+yo, image_xscale, image_yscale, 0, c, 1.0); 
    }
    
    // digital buttons
    if(global.p_up[player]){
        draw_sprite_ext(sprite_index, 5, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_left[player]){
        draw_sprite_ext(sprite_index, 6, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_down[player]){
        draw_sprite_ext(sprite_index, 7, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_right[player]){
        draw_sprite_ext(sprite_index, 8, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_stickl[player]){
        draw_sprite_ext(sprite_index, 9, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_stickr[player]){
        draw_sprite_ext(sprite_index, 10, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_o[player]){
        draw_sprite_ext(sprite_index, 11, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_u[player]){
        draw_sprite_ext(sprite_index, 12, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_y[player]){
        draw_sprite_ext(sprite_index, 13, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_a[player]){
        draw_sprite_ext(sprite_index, 14, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_rs[player]){
        draw_sprite_ext(sprite_index, 15, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_ls[player]){
        draw_sprite_ext(sprite_index, 16, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_rst[player]){
        draw_sprite_ext(sprite_index, 17, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_lst[player]){
        draw_sprite_ext(sprite_index, 18, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_st[player]){
        draw_sprite_ext(sprite_index, 19, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    if(global.p_se[player]){
        draw_sprite_ext(sprite_index, 20, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
    
    // decals
    if(global.p_type[player]==GAMEPAD_OUYA){
        draw_sprite_ext(sprite_index, 21, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    } else if(global.p_type[player]==GAMEPAD_XBOX){
        draw_sprite_ext(sprite_index, 22, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    } else if(global.p_type[player]==GAMEPAD_KEYS){
        draw_sprite_ext(sprite_index, 23, x, y, image_xscale, image_yscale, 0, c_white, 1.0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>204,169</point>
    <point>292,292</point>
  </PhysicsShapePoints>
</object>
